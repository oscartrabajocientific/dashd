import streamlit as st
import pandas as pd
import plotly.graph_objects as go
# No necesitas 'make_subplots' si no lo usas expl칤citamente para crear la figura inicial.
# No necesitas Dash, dcc, html, Input, Output, dash_bootstrap_components

# --- Configuraci칩n de la P치gina (Opcional pero recomendado) ---
st.set_page_config(
    page_title="Dashboard de Cultivos Colombia",
    page_icon="游꺔", # Puedes usar un emoji o una URL a un favicon
    layout="wide" # Usa el ancho completo de la p치gina
)

# --- Carga de Datos ---
# Funci칩n para cargar datos (mejor pr치ctica para usar el cach칠 de Streamlit)
# @st.cache_data asegura que los datos se carguen solo una vez, mejorando el rendimiento.
@st.cache_data
def load_data(url):
    """Carga los datos desde una URL (GitHub Raw Link)."""
    try:
        # Aseg칰rate de que la URL apunte al archivo "raw" en GitHub
        # Ejemplo: https://raw.githubusercontent.com/tu_usuario/tu_repo/main/datos.xlsx
        df = pd.read_excel(url)
        # Limpieza b치sica de nombres de columna (opcional pero 칰til)
        df.columns = df.columns.str.strip() # Quita espacios al inicio/final
        df.columns = df.columns.str.replace('\n', ' ', regex=False) # Reemplaza saltos de l칤nea
        return df
    except Exception as e:
        st.error(f"Error al cargar los datos desde la URL: {e}")
        st.error(f"Verifica que la URL sea correcta y apunte al archivo 'raw': {url}")
        return None # Devuelve None si hay error

# --- Interfaz de Usuario y L칩gica Principal ---

st.title("游늵 Dashboard de An치lisis de Cultivos en Colombia (2006-2023)")
st.markdown("Selecciona un cultivo para visualizar sus estad칤sticas anuales y departamentales.")

# --- Barra Lateral para Filtros ---
st.sidebar.header("Filtros")

# URL del archivo Excel en GitHub (춰DEBES REEMPLAZAR ESTA URL!)
# 1. Ve a tu repositorio en GitHub.
# 2. Navega hasta el archivo .xlsx.
# 3. Haz clic en el bot칩n "Raw".
# 4. Copia la URL de esa p치gina "Raw".
github_raw_url = "https://raw.githubusercontent.com/oscartrabajocientific/dashd/main/datos.xlsx" # <--- 춰REEMPLAZA ESTO!

# Cargar los datos usando la funci칩n
df = load_data(github_raw_url)

# Verifica si la carga de datos fue exitosa antes de continuar
if df is not None:
    # --- Selecci칩n de Cultivo ---
    cultivos_disponibles = sorted(df['CULTIVO'].unique())
    # Usa st.selectbox para el men칰 desplegable en la barra lateral
    cultivo_seleccionado = st.sidebar.selectbox(
        "Selecciona un Cultivo:",
        options=cultivos_disponibles,
        index=cultivos_disponibles.index('ARROZ') if 'ARROZ' in cultivos_disponibles else 0 # Valor predeterminado 'ARROZ' si existe
    )

    # --- Filtrar Datos ---
    # Filtra el DataFrame basado en la selecci칩n del usuario
    # Esto ocurre autom치ticamente cada vez que el usuario cambia la selecci칩n en Streamlit
    cultivo_df = df[df['CULTIVO'] == cultivo_seleccionado].copy() # Usar .copy() para evitar SettingWithCopyWarning

    # --- Mostrar KPIs o Informaci칩n Resumida (Opcional) ---
    st.subheader(f"Resumen para: {cultivo_seleccionado}")
    total_produccion = cultivo_df['Producci칩n (t)'].sum()
    area_promedio = cultivo_df['츼rea Cosechada (ha)'].mean()
    rendimiento_promedio = cultivo_df['Rendimiento (t/ha)'].mean()

    kpi1, kpi2, kpi3 = st.columns(3)
    kpi1.metric("Producci칩n Total (t)", f"{total_produccion:,.0f}")
    kpi2.metric("츼rea Cosechada Promedio (ha)", f"{area_promedio:,.1f}")
    kpi3.metric("Rendimiento Promedio (t/ha)", f"{rendimiento_promedio:,.2f}")

    st.markdown("---") # Separador visual

    # --- Creaci칩n de Gr치ficos (usando la l칩gica de Plotly que ya ten칤as) ---

    # Dividir la p치gina en columnas para los gr치ficos
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Top 10 Departamentos por 츼rea Cosechada")
        # Gr치fico 1: Top 10 departamentos por 치rea cosechada (cambiado de 'sembrada')
        top_10_departamentos = cultivo_df.groupby('DEPARTAMENTO')['츼rea Cosechada (ha)'].sum().nlargest(10)
        if not top_10_departamentos.empty:
            fig1 = go.Figure(go.Bar(
                x=top_10_departamentos.index,
                y=top_10_departamentos.values,
                marker_color='#1f77b4',
                name='츼rea Cosechada'
            ))
            fig1.update_layout(
                # title=f'Top 10 Departamentos por 츼rea Cosechada - {cultivo_seleccionado}', # T칤tulo ya est치 como subheader
                xaxis_title='Departamento',
                yaxis_title='츼rea Cosechada (ha)',
                template='plotly_white',
                height=400 # Ajustar altura si es necesario
            )
            # Mostrar gr치fico en Streamlit
            st.plotly_chart(fig1, use_container_width=True)
        else:
            st.warning("No hay suficientes datos departamentales para mostrar este gr치fico.")


        st.subheader("Hist칩rico de Producci칩n Anual")
        # Gr치fico 3: Hist칩rico de producci칩n
        cultivo_historico = cultivo_df.groupby('A칌O')['Producci칩n (t)'].sum().reset_index()
        if not cultivo_historico.empty:
            fig3 = go.Figure(go.Scatter(
                x=cultivo_historico['A칌O'],
                y=cultivo_historico['Producci칩n (t)'],
                mode='lines+markers',
                line=dict(color='#2ca02c', width=2),
                marker=dict(size=8),
                name='Producci칩n'
            ))
            fig3.update_layout(
                # title=f'Hist칩rico de Producci칩n de {cultivo_seleccionado}',
                xaxis_title='A침o',
                yaxis_title='Producci칩n (t)',
                template='plotly_white',
                 height=400 # Ajustar altura si es necesario
            )
            st.plotly_chart(fig3, use_container_width=True)
        else:
            st.warning("No hay suficientes datos hist칩ricos para mostrar este gr치fico.")

    with col2:
        st.subheader("Distribuci칩n del Rendimiento")
        # Gr치fico 2: Boxplot del rendimiento
        if not cultivo_df['Rendimiento (t/ha)'].dropna().empty:
            fig2 = go.Figure(go.Box(
                y=cultivo_df['Rendimiento (t/ha)'],
                name='Rendimiento',
                marker_color='#ff7f0e'
            ))
            fig2.update_layout(
                # title=f'Distribuci칩n del Rendimiento - {cultivo_seleccionado}',
                yaxis_title='Rendimiento (t/ha)',
                template='plotly_white',
                height=400 # Ajustar altura si es necesario
            )
            st.plotly_chart(fig2, use_container_width=True)
        else:
             st.warning("No hay datos de rendimiento para mostrar este gr치fico.")


        st.subheader("Relaci칩n 츼rea Cosechada vs. Rendimiento")
        # Gr치fico 4: Gr치fico de dispersi칩n
        if not cultivo_df[['츼rea Cosechada (ha)', 'Rendimiento (t/ha)']].dropna().empty:
            fig4 = go.Figure(go.Scatter(
                x=cultivo_df['츼rea Cosechada (ha)'],
                y=cultivo_df['Rendimiento (t/ha)'],
                mode='markers',
                marker=dict(
                    color='#d62728',
                    size=10,
                    opacity=0.7,
                    line=dict(width=1)
                ),
                text=cultivo_df['DEPARTAMENTO'], # Mostrar departamento en hover (opcional)
                name='Registros'
            ))
            fig4.update_layout(
                # title=f'츼rea Cosechada vs. Rendimiento - {cultivo_seleccionado}',
                xaxis_title='츼rea Cosechada (ha)',
                yaxis_title='Rendimiento (t/ha)',
                template='plotly_white',
                height=400 # Ajustar altura si es necesario
            )
            st.plotly_chart(fig4, use_container_width=True)
        else:
            st.warning("No hay suficientes datos para mostrar el gr치fico de dispersi칩n.")

    # --- Mostrar Tabla de Datos Filtrados (Opcional) ---
    st.markdown("---")
    st.subheader(f"Datos Detallados para {cultivo_seleccionado}")
    # Muestra el dataframe filtrado, puedes limitar las columnas si quieres
    st.dataframe(cultivo_df[['A칌O', 'DEPARTAMENTO', 'MUNICIPIO', '츼rea Sembrada (ha)', '츼rea Cosechada (ha)', 'Producci칩n (t)', 'Rendimiento (t/ha)']].reset_index(drop=True))

else:
    st.warning("No se pudieron cargar los datos. Verifica la URL de GitHub y la conexi칩n.")

# --- Pie de P치gina (Opcional) ---
st.markdown("---")
st.markdown("Dashboard creado con Streamlit y Plotly.")

